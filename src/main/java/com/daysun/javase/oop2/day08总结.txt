1:代码块(了解)
	(1)由{}括起来的代码，就被称为代码块。
	(2)分类及作用：
		局部代码块：限定变量的生命周期，及时从内存释放，提高效率。
		构造代码块：把所有构造方法中相同的代码抽取出来，提高代码复用性。
		静态代码块：适用于在一个系统中只执行一次的代码。
	(3)面试题：静态代码块，构造代码块，构造方法的执行顺序
		静态代码块 > 构造代码块 > 构造方法

2:一个类的创建过程(理解)
	Person p = new Person();

	A:把Person.class加载到内存
	B:在栈内存开辟空间存储p变量
	C:在堆内存为new Person()开辟空间
	D:对成员变量进行默认初始化
	E:对成员变量进行显示初始化
	F:通过构造方法对成员变量进行初始化
		(如果有构造代码块，通过它进行成员变量的初始化。)
	G:对象构造完毕，把地址值赋值给p变量

3:继承(掌握)
	(1)我们在创建一个新类的时候，没有必要重头开始，可以再已知的类的基础上，扩充自己的内容。
	(2)父类是怎么来的?
		是由多个类中相同的成员变量和成员方法抽取出来的。
	(3)好处：
		A:提高了代码的复用性
		B:让类与类之间产生了一个关系，是多态的前提
	(4)特点：
		A:java中只能单继承
		B:java中可以多层继承
	(5)什么时候用继承?
		A:继承表达的是一种关系：is a。
			所以。我们采用假设法即可。
			举例：A和B两个类。
		B:不要为了部分功能而去继承。
	(6)继承后子父间的成员关系
		A:成员变量
			a:如果名字不同，太简单了。
			b:如果有名字相同的变量，在方法中使用的时候：
				首先在局部范围找，有就使用。
				然后在成员位置找，有就使用。
				最后在父类成员位置找，有就使用。
				实在没有就报错。

		B:构造方法
			a:子类并没有继承父类的构造方法。
			b:子类的构造方法执行前会先执行父类的构造方法。
				这个时候，并没有创建父类的对象，仅仅是对父类的内容进行了初始化。

			注意：
				如果父亲没有无参构造。
				在子类中，要么用this(...)要么用super(...)
		
		C:成员方法
			a:如果名字不同，太简单了。
			b:如果有名字相同的方法，是重写的表现形式。(覆盖，复写)
				子类使用的是自己的。
			
			方法重写：和父类方法声明相同的方法。跟父类方法一模一样即可。
				详细讲解：
					方法名相同，参数列表相同。
					返回值类型小于等于父类的返回值类型。
					权限修饰符大于等于父类的权限修饰符。

			注意：
				A:父类私有的方法不能被重写
				B:静态方法只能被静态方法重写静态。
	(7)面试题
		A:方法重写和方法重载的区别?方法重载能改变返回值类型吗?
		B:this和super的区别?以及他们的应用场景。
			this:代表当前类的引用对象。谁调用，代表谁。
			super:代表父类的存储空间标识。可以理解为父类引用对象。

			应用场景：
				成员变量
				构造方法
				成员方法
		C:看程序写结果。yxyz
			a:一个类的初始化过程
			b:分层初始化思想
			c:super仅仅表示要对父亲进行初始化
			
4:final(掌握)
	(1)是最终的意思。可以修饰类，修饰成员方法，修饰变量。
	(2)特点：
		A:它修饰的类不能被继承
		B:它修饰的成员方法不能被重写
		C:它修饰的变量是常量
	(3)面试题：
		A:final修饰的变量一般在定义的时候就给赋值了，那么，请问有没有可能在其他情况下赋值?
			有。在构造方法完毕前都行。
			class OuterInnerDemo 
			{
				final int x;	//此处就没有在定义时直接赋值，在构造函中给赋值
				OuterInnerDemo()
				{
					x=5;
				}
				public static void main(String[] args) 
				{
					int x=new OuterInnerDemo().x;
					System.out.println(x);
	
				}
			}

		B:final修饰基本类型和引用类型
			final修饰基本类型：值不能改变
			final修饰引用类型：地址值不能改变，对象的内容是可以发生改变的。



1:我现在有这样的2个类
    狗类：
        属性：姓名,年龄
        行为：吃饭,跑步
    猫类：
        属性：姓名,年龄
        行为：吃饭,捉迷藏
  请自己设计出一个合理的方案，分析用几个类就可以把我的需求给描述出来。
    请参照代码：ExerciseDemo.java和ExerciseDemo2.java

2:方法重写和方法重载的区别?重载可以改变返回值类型吗?(面试题。)
    方法重写：在不同类中，方法声明相同。(方法名和参数列表)
        扩充：返回值类型可以小于等于父类返回值类型
              权限修饰符要大于等于父类的权限修饰符

    方法重载：在同一个类，方法名相同，参数列表不同。

    重载可以改变返回值类型，因为它和返回值类型无关。

    重载：overload
    重写：override

3:this和super的区别,以及应用场景?
    this：代表当前类的一个引用对象。谁调用，它代表谁。
    super：代表的是父类的存储空间标识。可以理解为父类的引用对象。

    应用场景：
        成员变量：
            this.变量 使用当前类的成员变量
            super.变量 使用父类的成员变量
        构造方法：
            this(...) 使用当前类的构造方法
            super(...) 使用父类的构造方法
        成员方法：
            this.方法() 使用当前类的成员方法
            super.方法() 使用父类的成员方法

    构造方法问题：
        子类在实例化的时候，会首先调用父类的构造方法。
        在子类的构造方法中，默认有一个调用父类的无参构造方法。
        假如父类并没有提供无参构造方法。
        这个时候，代码就会报错，请问怎么解决?
            使用super(...)调用父类带参构造方法
            使用this(...)调用本类的其他构造方法

    class Fu {
        public Fu(String name) {

        }
    }

    class Zi extends Fu {
        public Zi() {
            //super("hello");
            this("hello");
        }

        public Zi(String name) {
            super(name);
        }
    }

4:分析如下代码的结果：
    class Test
    {
        private static int x =  10;

        public void show(int x)  //20
        {
            x++; //21
            System.out.println(x);
        }

        public static void main(String[] args)
        {
            int x = 20;
            Test t = new Test();
            t.show(x);
            System.out.println(t.x);
            //System.out.println(x);
        }
    }

5:分析如下代码的结果：
    class Fu{
        public int num = 10;
        public Fu(){
            System.out.println("fu");
        }
    }
    class Zi extends Fu{
        public int num = 20;
        public Zi(){
            System.out.println("zi");
        }
        public void show(){
            int num = 30;
            System.out.println(num); //30
            System.out.println(this.num); //20
            System.out.println(super.num); //10
        }
    }
    class Test {
        public static void main(String[] args) {
            Zi z = new Zi(); //fu,zi
            z.show();
        }
    }

6:分析如下代码的结果
    class X {
        Y b = new Y();
        X() {
            System.out.print("X");
        }
    }
    class Y {
        Y() {
            System.out.print("Y");
        }
    }
    public class Z extends X {
        Y y = new Y();
        Z() {
            //super(); //是为了表示要初始化它的父亲。并不是说初始是从这里开始的。
            // 走到这里要先走父级初始化 X
            System.out.print("Z");
        }
        public static void main(String[] args) {
            new Z(); //YXYZ
        }
    }

    第一个问题：
        一个类的初始化
            A:把class文件加载到内存
            B:在栈内存开辟p变量空间
            C:在堆内存开辟new Person()空间
            D:对成员变量默认初始化
            E:对成员变量显示初始化
            F:走构造方法对成员变量初始化(如果有构造代码块，走构造代码块)
            G:构造完毕，把地址赋值给p变量。

        具有继承关系的初始化：分层初始化。
            Object
                Fu
                    Zi
            先初始化父亲，在初始化儿子。
            不管初始化谁，都是按照一个类的初始化执行的。
    第二个问题：
        super仅仅是表示要先初始化父亲。