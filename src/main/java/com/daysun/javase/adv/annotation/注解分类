按照运行机制分类
    源码注解
        在源码中存在
    编译时注解
        在源码和.class文件中都存在
    运行时注解
        在运行阶段起作用

按照来源分
    JDK
    第三方
    自定义

jdk1.5版本内置了三种标准的注解：
    @Override，表示当前的方法定义将覆盖超类中的方法。
    @Deprecated，使用了注解为它的元素编译器将发出警告，因为注解@Deprecated是不赞成使用的代码，被弃用的代码。
    @SuppressWarnings,关闭不当编辑器警告信息。

Java还提供了4中注解，专门负责新注解的创建:

    @Target：表示该注解可以用于什么地方，可能的ElementType参数有：
        CONSTRUCTOR：构造器的声明
        FIELD：域声明（包括enum实例）
        LOCAL_VARIABLE：局部变量声明
        METHOD：方法声明
        PACKAGE：包声明
        PARAMETER：参数声明
        TYPE：类、接口（包括注解类型）或enum声明

    @Retention：表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：
        SOURCE：注解将被编译器丢弃
        CLASS：注解在class文件中可用，但会被VM丢弃
        RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息

    @Document：将注解包含在Javadoc中

    @Inherited：允许子类继承父类中的注解