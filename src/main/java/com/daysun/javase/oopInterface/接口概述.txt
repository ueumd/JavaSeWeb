请认真看下面的内容：
	class A {
		public void show() {
			System.out.println("show A");
		}
	}

	class B {
		public void show() {
			System.out.println("show B");
		}
	}
这种代码，我们最终通过了抽象类来进行了表示：
	abstract class Demo {
		public abstract void show();
	}
这个抽象类中，我们发现它只有抽象方法，针对这种特性的情况，java又提供了一种表达方式：接口。
通过这个描述，我们可以理解：接口是一种特殊的抽象类。

那么，既然有了接口这个内容，那么，我们是如何定义接口的呢?
我要想知道格式，我首先得知道接口关键字：interface
格式：
	interface 接口名 {
		
	}
如果一个接口出现了，那么，将来怎么使用呢?
class 类名 实现 接口 {
	
}
这里的实现：implements。
所以，我们就可以分别使用抽象类和接口来体现上述代码：
抽象类版本：
	abstract class Demo {
		public abstract void show();
	}
	
	class A extends Demo {
		public void show() {
			System.out.println("show A");
		}
	}

	class B extends Demo {
		public void show() {
			System.out.println("show B");
		}
	}

接口版本：
	interface Demo {
		public abstract void show();
	}
	
	class A implements Demo {
		public void show() {
			System.out.println("show A");
		}
	}

	class B implements Demo {
		public void show() {
			System.out.println("show B");
		}
	}
